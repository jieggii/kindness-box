from beanie import DeleteRules, WriteRules
from beanie.operators import In
from loguru import logger
from vkwave.bots import BotEvent, DefaultRouter, Keyboard, SimpleBotEvent
from vkwave.bots.fsm import ForWhat, StateFilter

from bot import aliases, fmt, messages, parsers, settings, vk_util
from bot.database.models import Donor, Municipality, Recipient
from bot.fsm import FSM, HomeState
from bot.keyboards import CancelKeyboard, HomeKeyboard, HomeNoRecipientsKeyboard, StartKeyboard

FOR_USER = ForWhat.FOR_USER

router = DefaultRouter()
reg = router.registrar


async def send_home(event: BotEvent):
    event = SimpleBotEvent(event)
    donor = await Donor.find_one(Donor.user_id == event.from_id)

    if donor.brought_gifts:
        logger.warning("got message from brought_gifts==True donor. setting state to FINISH")
        await FSM.set_state(state=HomeState.FINISH, event=event, for_what=FOR_USER)
        return

    await FSM.set_state(state=HomeState.HOME, event=event, for_what=FOR_USER)

    if await Recipient.find_one(Recipient.donor != None):  # if the current donor has at least one recipient
        kbd = HomeKeyboard()
        await event.answer(messages.MAIN_MENU_CHOOSE_ACTION_USING_KBD, keyboard=kbd.get_keyboard())

    else:
        kbd = HomeNoRecipientsKeyboard()
        await event.answer(
            "–¢–µ–ø–µ—Ä—å —Ç—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. "
            "–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—à—å –¥–∞—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏, "
            "–ª–∏–±–æ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ –∞–∫—Ü–∏–∏, –µ—Å–ª–∏ —Ç—ã –≤–¥—Ä—É–≥ –ø–µ—Ä–µ–¥—É–º–∞–ª(–∞)!",
            keyboard=kbd.get_keyboard(),
        )


async def send_all_recipients_list(event: BotEvent):
    event = SimpleBotEvent(event)
    donor = await Donor.find_one(Donor.user_id == event.from_id, fetch_links=True)

    # fetch recipients from the same municipality as donor's:
    recipients = await Recipient.find(Recipient.municipality.id == donor.municipality.id, fetch_links=True).to_list()
    if not recipients:
        await event.answer(
            "–°–ø–∏—Å–æ–∫ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –ø–æ–¥–∞—Ä–∫–µ –≤ –≤–∞—à–µ–º –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ, –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –¥–Ω–µ–π! ü•≤ü•≤"
        )
        return

    message = ""
    for recipient in recipients:
        if recipient.donor:  # if recipient already has a donor
            checkbox = "[ X ]"  # checked checkbox
        else:
            checkbox = "[&#8195;]"  # unchecked checkbox

        message += f"{checkbox} #{recipient.identifier} {fmt.recipient_name(recipient.name)} {recipient.age} –ª–µ—Ç "

        if recipient.donor:
            if recipient.donor.id == donor.id:
                message += "(–ø–æ–¥–∞—Ä–æ–∫ —É–∂–µ –ø–æ–∫—É–ø–∞–µ—à—å —Ç—ã) "
            else:
                message += f"(–ø–æ–¥–∞—Ä–æ–∫ —É–∂–µ –ø–æ–∫—É–ø–∞–µ—Ç @id{recipient.donor.user_id}({recipient.donor.name})) "

        message += f"-- {recipient.gift_description}\n\n"

    await FSM.set_state(state=HomeState.CHOOSE_PERSONS, event=event, for_what=FOR_USER)

    for batch in vk_util.batch_message(message):
        await event.answer(batch)

    kbd = CancelKeyboard()
    await event.answer(
        "–ü–µ—Ä–µ—á–∏—Å–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (—á–∏—Å–ª–æ –ø–æ—Å–ª–µ —Å–∏–º–≤–æ–ª–∞ <<#>>) "
        "–æ—Ç 1 –¥–æ 5 —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—à—å –ø–æ–∫—É–ø–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫"
        f"{f' –æ—Ç –∏–º–µ–Ω–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ <<{donor.organization_name}>>.' if donor.organization_name else '.'}\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 105, 107, 103",
        keyboard=kbd.get_keyboard(),
    )


@reg.with_decorator(StateFilter(fsm=FSM, state=HomeState.CHOOSE_PERSONS, for_what=FOR_USER))
async def choose_recipients(event: BotEvent):
    event = SimpleBotEvent(event)

    if event.text == CancelKeyboard.CANCEL:
        await send_home(event)
        return

    try:
        recipient_identifiers = parsers.parse_recipient_identifiers(event.text)
    except parsers.ParsingError:
        await event.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è! –ü–µ—Ä–µ—á–∏—Å–ª–∏ –Ω–æ–º–µ—Ä–∞ –ª—é–¥–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n" "–ù–∞–ø—Ä–∏–º–µ—Ä: 105, 107, 103")
        return

    if len(recipient_identifiers) > 5:
        await event.answer(f"–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ 5-–∏ —á–µ–ª–æ–≤–µ–∫. {messages.TRY_AGAIN}")
        return

    # fetch chosen recipients:
    recipients = await Recipient.find(In(Recipient.identifier, recipient_identifiers), fetch_links=True).to_list()
    if len(recipients) != len(recipient_identifiers):  # if at least one recipient hasn't been found
        await event.answer(
            f"–û–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–±–æ–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. {messages.TRY_AGAIN}"
        )
        return

    donor = await Donor.find_one(Donor.user_id == event.from_id)

    # todo: check if donor is in the same municipality as all selected recipients

    # check if all recipients don't have any donors yet:
    for recipient in recipients:
        if recipient.donor:
            if recipient.donor.id != donor.id:
                await event.answer(
                    f"–û–¥–Ω–æ–º—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ª—é–¥—è–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–±–æ–π —É–∂–µ –∫—Ç–æ-—Ç–æ –ø–æ–∫—É–ø–∞–µ—Ç –ø–æ–¥–∞—Ä–æ–∫. {messages.TRY_AGAIN}"
                )
                return

    # remove past assignations:
    async for recipient in Recipient.find(Recipient.donor.id == donor.id, fetch_links=True):
        recipient.donor = None
        await recipient.save()

    # assign the current donor to the chosen recipients:
    for recipient in recipients:
        recipient.donor = donor  # todo?: creates a new document instead of a link
        await recipient.save()

    message = "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å –∏ —É–ø–∞–∫–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –¥–ª—è —ç—Ç–∏—Ö –ª—é–¥–µ–π:\n"
    for recipient in recipients:
        message += f"- {fmt.recipient_name(recipient.name)} (#{recipient.identifier}) -- {recipient.gift_description}\n"

    message += (
        "\n"
        "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º –∫—É–¥–∞, "
        f"–∫–æ–≥–¥–∞ –∏ –≤ –∫–∞–∫–æ–º –≤–∏–¥–µ –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É <<{HomeKeyboard.INFO}>>",
    )

    await event.answer(message)
    await send_home(event)


async def send_stats(event: SimpleBotEvent):
    message = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º:\n"

    async for municipality in Municipality.find_all():
        total_recipients = 0
        chosen_recipients = 0
        satisfied_recipients = 0  # number of recipients whose gifts has been brought to a point

        async for recipient in Recipient.find(Recipient.municipality.id == municipality.id, fetch_links=True):
            if recipient.donor:
                chosen_recipients += 1
                if recipient.donor.brought_gifts:
                    satisfied_recipients += 1

            total_recipients += 1

        message += (
            f"{municipality.name}:\n"
            f"- –í—ã–±—Ä–∞–Ω–æ {chosen_recipients}/{total_recipients} —á–µ–ª–æ–≤–µ–∫.\n"
            f"- –ü—Ä–∏–Ω–µ—Å–µ–Ω–æ {satisfied_recipients}/{chosen_recipients} –ø–æ–¥–∞—Ä–∫–æ–≤.\n\n"
        )

    await event.answer(message)


@reg.with_decorator(StateFilter(fsm=FSM, state=HomeState.HOME, for_what=FOR_USER))
async def home(event: BotEvent):
    event = SimpleBotEvent(event)
    donor = await Donor.find_one(Donor.user_id == event.from_id, fetch_links=True)

    recipients = await Recipient.find(Recipient.donor.id == donor.id, fetch_links=True).to_list()

    if event.text.lower() == "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await send_stats(event)
        return

    if recipients:  # if there is at least one recipient
        match event.text:
            case HomeKeyboard.EDIT_MY_LIST:
                await send_all_recipients_list(event)

            case HomeKeyboard.MY_LIST:
                message = "–°–ø–∏—Å–æ–∫ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–º —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏:\n"
                for recipient in recipients:
                    message += f"- {fmt.recipient_name(recipient.name)} {recipient.age} –ª–µ—Ç (#{recipient.identifier}) -- {recipient.gift_description}\n"
                await event.answer(message)

            case HomeKeyboard.INFO:
                message = f"–û—Ç–Ω–µ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∏ –≤ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ {donor.municipality.name} –º–æ–∂–Ω–æ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∞–¥—Ä–µ—Å–∞–º:\n"
                for address in donor.municipality.addresses:
                    message += f"- {address}\n"
                message += (
                    "\n"
                    "üö® –í–∞–∂–Ω–æ:"
                    "\n"
                    f"1. –ü–æ–¥–∞—Ä–∫–∏ —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω–µ—Å—Ç–∏ –¥–æ {settings.DEADLINE}."
                    f"\n\n"
                    "2. –ù–∞ –ø–æ–¥–∞—Ä–∫–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ."
                    "\n"
                    f"–≠—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <<{HomeKeyboard.MY_LIST}>>."
                )
                await event.answer(message)

            case HomeKeyboard.I_BROUGHT_GIFTS:
                message = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –µ—â–µ —Ä–∞–∑–æ–∫, —á—Ç–æ –≤—ã –ø—Ä–∏–Ω–µ—Å–ª–∏ –ø–æ–¥–∞—Ä–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:\n"
                for recipient in recipients:
                    message += f"- {recipient.name} (#{recipient.identifier}) - {recipient.gift_description}\n"

                await aliases.send_confirmation(
                    event,
                    text=message,
                    confirmation_handler_state=HomeState.CONFIRM_I_BROUGHT_GIFTS,
                )

            case HomeKeyboard.REJECT_PARTICIPATION:
                await send_rejection_confirmation(event)

            case _:
                await event.answer(messages.INVALID_OPTION)

    else:
        match event.text:
            case HomeNoRecipientsKeyboard.EDIT_MY_LIST:
                await send_all_recipients_list(event)

            case HomeNoRecipientsKeyboard.REJECT_PARTICIPATION:
                await send_rejection_confirmation(event)

            case _:
                await event.answer(messages.INVALID_OPTION)


async def send_rejection_confirmation(event: SimpleBotEvent):
    await aliases.send_confirmation(
        event=event,
        text="–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ –∞–∫—Ü–∏–∏?",
        confirmation_handler_state=HomeState.CONFIRM_REJECTION,
    )


@reg.with_decorator(StateFilter(fsm=FSM, state=HomeState.CONFIRM_REJECTION, for_what=FOR_USER))
async def confirm_rejection(event: BotEvent):
    event = SimpleBotEvent(event)
    confirmation = await aliases.handle_confirmation(event)

    # –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–∏–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ confirmation –º–æ–∂–µ—Ç —Ç–∞–∫–∂–µ –±—ã—Ç—å —Ä–∞–≤–µ–Ω None (todo wtf?)
    if confirmation is True:
        donor = await Donor.find_one(Donor.user_id == event.from_id)

        # I don't know why, but link_rule=DeleteRules.DELETE_LINKS doesn't work, so
        # removing link to the donor being deleted manually:
        recipients = Recipient.find(Recipient.donor.id == donor.id)
        async for recipient in recipients:
            recipient.donor = None
            await recipient.save()

        await donor.delete(link_rule=DeleteRules.DELETE_LINKS)

        await event.answer(
            "–•–æ—Ä–æ—à–æ! –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å -- —Å–º–µ–ª–æ –ø–∏—à–∏ —Å—é–¥–∞ —Å–Ω–æ–≤–∞",
            keyboard=StartKeyboard().get_keyboard(),
        )
        await FSM.finish(event=event, for_what=FOR_USER)

    elif confirmation is False:
        await send_home(event)


@reg.with_decorator(StateFilter(fsm=FSM, state=HomeState.CONFIRM_I_BROUGHT_GIFTS, for_what=FOR_USER))
async def confirm_i_brought_gifts(event: BotEvent):
    event = SimpleBotEvent(event)
    confirmation = await aliases.handle_confirmation(event)

    if confirmation is True:
        donor = await Donor.find_one(Donor.user_id == event.from_id)
        donor.brought_gifts = True
        await donor.save()

        kbd = Keyboard()
        await event.answer("ü•≥ –£—Ä–∞! –°–ø–∞—Å–∏–±–æ –æ–≥—Ä–æ–º–Ω–æ–µ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∞–∫—Ü–∏–∏ <3", keyboard=kbd.get_empty_keyboard())
        await FSM.set_state(state=HomeState.FINISH, event=event, for_what=FOR_USER)

    elif confirmation is False:
        await send_home(event)


@reg.with_decorator(StateFilter(fsm=FSM, state=HomeState.FINISH, for_what=FOR_USER))
async def finish(event: BotEvent):
    event = SimpleBotEvent(event)
    if event.text == "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await send_stats(event)
