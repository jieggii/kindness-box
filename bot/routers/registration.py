from loguru import logger
from vkwave.bots import BotEvent, DefaultRouter, Keyboard, SimpleBotEvent
from vkwave.bots.fsm import NO_STATE, ForWhat, StateFilter

from bot import messages, parsers, settings, vk_util
from bot.database.models import Donor, Municipality
from bot.fsm import FSM, FSMDataKey, HomeState, RegistrationState
from bot.keyboards.common import YesNoKeyboard
from bot.keyboards.registration import ChooseMunicipalityKeyboard, ChooseOrganizationOptionKeyboard
from bot.routers import home

FOR_USER = ForWhat.FOR_USER

router = DefaultRouter()
reg = router.registrar


@reg.with_decorator(StateFilter(fsm=FSM, state=NO_STATE, for_what=FOR_USER))
async def start(event: BotEvent):
    event = SimpleBotEvent(event)
    user_id = event.from_id

    donor = await Donor.find_one(Donor.user_id == user_id)
    if not donor:
        first_name, last_name = await vk_util.fetch_current_user_name(event)
        await event.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞–∫—Ü–∏–∏ <<–ö–æ—Ä–æ–±–æ—á–∫–∞ –¥–æ–±—Ä–æ—Ç—ã>>."
            "\n"
            "\n"
            "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–µ–ª–æ–≤–µ–∫ —Å "
            "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏, –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—à—å –¥–∞—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫."
            "\n"
            "\n"
            f"üìÖ –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω–µ—Å—Ç–∏ –Ω–∞ —Ç–æ—á–∫—É —Å–±–æ—Ä–∞ –¥–æ {settings.DEADLINE}.\n\n"
            "–ù–æ, –¥–ª—è –Ω–∞—á–∞–ª–∞, –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–±–µ."
        )
        await FSM.set_state(state=RegistrationState.SET_MUNICIPALITY, event=event, for_what=FOR_USER)
        await FSM.add_data(event, for_what=FOR_USER, state_data={FSMDataKey.DONOR_NAME: f"{first_name} {last_name}"})

        logger.info(f"a new user {first_name} {last_name} (vk.com/id{user_id}) started registration")
        await request_municipality_name(event)
    else:
        await home.send_home(event)


async def request_municipality_name(event: BotEvent):
    event = SimpleBotEvent(event)

    municipalities = await Municipality.find_all().to_list()
    kbd = ChooseMunicipalityKeyboard([municipality.name for municipality in municipalities])
    await event.answer(
        "üìç –í—ã–±–µ—Ä–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –±—É–¥–µ—à—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –∞–∫—Ü–∏–∏.",
        keyboard=kbd.get_keyboard(),
    )


@reg.with_decorator(StateFilter(fsm=FSM, state=RegistrationState.SET_MUNICIPALITY, for_what=FOR_USER))
async def set_municipality_name(event: BotEvent):
    event = SimpleBotEvent(event)
    municipality_name = event.text

    if not await Municipality.find_one(Municipality.name == municipality_name):  # if municipality not found
        await event.answer("–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∞–∫—Ü–∏–∏! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return

    kbd = ChooseOrganizationOptionKeyboard()
    await event.answer(
        "üè£ –¢—ã –±—É–¥–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞–∫—Ü–∏–∏ –æ—Ç —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –æ—Ç –∏–º–µ–Ω–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏?",
        keyboard=kbd.get_keyboard(),
    )
    await FSM.add_data(event, for_what=FOR_USER, state_data={FSMDataKey.MUNICIPALITY_NAME: municipality_name})
    await FSM.set_state(state=RegistrationState.CHOOSE_ORGANIZATION_OPTION, event=event, for_what=FOR_USER)


@reg.with_decorator(StateFilter(fsm=FSM, state=RegistrationState.CHOOSE_ORGANIZATION_OPTION, for_what=FOR_USER))
async def choose_organization_option(event: BotEvent):
    event = SimpleBotEvent(event)

    match event.text:
        case ChooseOrganizationOptionKeyboard.BY_MYSELF:  # no organization
            await request_phone_number(event)
            await FSM.set_state(state=RegistrationState.SET_PHONE_NUMBER, event=event, for_what=FOR_USER)
            await FSM.add_data(event=event, for_what=FOR_USER, state_data={FSMDataKey.ORGANIZATION_NAME: None})

        case ChooseOrganizationOptionKeyboard.BY_ORGANIZATION:  # organization
            kbd = Keyboard()
            await event.answer(
                "–•–æ—Ä–æ—à–æ. –¢–æ–≥–¥–∞ –Ω–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.",
                keyboard=kbd.get_empty_keyboard(),
            )
            await FSM.set_state(state=RegistrationState.SET_ORGANIZATION_NAME, event=event, for_what=FOR_USER)

        case _:
            await event.answer(messages.INVALID_OPTION)


@reg.with_decorator(StateFilter(fsm=FSM, state=RegistrationState.SET_ORGANIZATION_NAME, for_what=FOR_USER))
async def set_organization_name(event: BotEvent):
    event = SimpleBotEvent(event)
    organization_name = event.text

    if len(organization_name) > settings.MAX_ORGANIZATION_NAME_LENGTH:
        return await event.answer(f"–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. {messages.TRY_AGAIN}")

    await request_phone_number(event)
    await FSM.set_state(state=RegistrationState.SET_PHONE_NUMBER, event=event, for_what=FOR_USER)
    await FSM.add_data(event=event, for_what=FOR_USER, state_data={FSMDataKey.ORGANIZATION_NAME: organization_name})


async def request_phone_number(event: BotEvent):
    event = SimpleBotEvent(event)
    kbd = Keyboard()
    await event.answer(
        "üìû –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É, "
        "–≤ —Å–ª—É—á–∞–µ —á–µ–≥–æ, –≤–æ–ª–æ–Ω—Ç–µ—Ä—ã —Å–º–æ–≥–ª–∏ –±—ã —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è.",
        keyboard=kbd.get_empty_keyboard(),
    )


@reg.with_decorator(StateFilter(fsm=FSM, state=RegistrationState.SET_PHONE_NUMBER, for_what=FOR_USER))
async def set_phone_number(event: BotEvent):
    event = SimpleBotEvent(event)
    try:
        phone_number = parsers.parse_phone_number(event.text)
    except parsers.ParsingError:
        await event.answer(f"–≠—ç—ç... –≠—Ç–æ —á—Ç–æ-—Ç–æ –Ω–µ –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. {messages.TRY_AGAIN}")
        return

    await FSM.add_data(event=event, for_what=FOR_USER, state_data={FSMDataKey.PHONE_NUMBER: phone_number})
    await request_registration_confirmation(event)


async def request_registration_confirmation(event: BotEvent):
    event = SimpleBotEvent(event)

    fsm_data = await FSM.get_data(event=event, for_what=FOR_USER)

    municipality_name = fsm_data[FSMDataKey.MUNICIPALITY_NAME]
    organization_name = fsm_data[FSMDataKey.ORGANIZATION_NAME]
    phone_number = fsm_data[FSMDataKey.PHONE_NUMBER]

    message = "‚úèÔ∏è –î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–µ:\n" f"- –ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç: {municipality_name}\n"
    if organization_name:
        message += f"- –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <<{organization_name}>>\n"
    else:
        message += "- –£—á–∞—Å—Ç–≤—É–µ—à—å –≤ –∞–∫—Ü–∏–∏ –Ω–µ –æ—Ç –∏–º–µ–Ω–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏\n"

    message += f"- –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n\n" f"–í—Å–µ –≤–µ—Ä–Ω–æ?"

    kbd = YesNoKeyboard(primary_option=True)
    await FSM.set_state(RegistrationState.CONFIRM_REGISTRATION, event, FOR_USER)
    await event.answer(message, keyboard=kbd.get_keyboard())


@reg.with_decorator(StateFilter(fsm=FSM, state=RegistrationState.CONFIRM_REGISTRATION, for_what=FOR_USER))
async def confirm_registration(event: BotEvent):
    event = SimpleBotEvent(event)

    match event.text:
        case YesNoKeyboard.TRUE:
            fsm_data = await FSM.get_data(event=event, for_what=FOR_USER)

            user_id = event.from_id
            donor_name = fsm_data[FSMDataKey.DONOR_NAME]
            phone_number = fsm_data[FSMDataKey.PHONE_NUMBER]
            organization_name = fsm_data[FSMDataKey.ORGANIZATION_NAME]
            municipality_name = fsm_data[FSMDataKey.MUNICIPALITY_NAME]

            municipality = await Municipality.find_one(Municipality.name == municipality_name)

            donor = Donor(
                user_id=user_id,
                name=donor_name,
                phone_number=phone_number,
                organization_name=organization_name,
                municipality=municipality,
            )
            await donor.save()

            logger.info(f"registered a new donor: {donor}")
            await event.answer("‚ú® –ß—É–¥–µ—Å–Ω–æ! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∞–∫—Ü–∏—é –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
            await home.send_home(event)
            await FSM.set_state(state=HomeState.HOME, event=event, for_what=FOR_USER)

        case YesNoKeyboard.FALSE:
            await event.answer("ü§î –ß—Ç–æ-–∂, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞. –ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–π –≤ —ç—Ç–æ—Ç —Ä–∞–∑!)")
            await FSM.add_data(
                event=event,
                for_what=FOR_USER,
                state_data={
                    FSMDataKey.PHONE_NUMBER: None,
                    FSMDataKey.MUNICIPALITY_NAME: None,
                    FSMDataKey.ORGANIZATION_NAME: None,
                },
            )
            await request_municipality_name(event)
            await FSM.set_state(state=RegistrationState.SET_MUNICIPALITY, event=event, for_what=FOR_USER)

        case _:
            await event.answer(messages.INVALID_OPTION)
